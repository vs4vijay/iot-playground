---
name: Compile Firmwares

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  # compile_playground_sketch:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Compile demo sketch on ESP32
  #       uses: arduino/compile-sketches@v1
  #       with:
  #         sketch-paths: |
  #           - ./iot-playground.ino
  #         libraries: |
  #           - 
  #         enable-deltas-report: true
  #         enable-warnings-report: true
  #         sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}
      
  #     - name: List all files
  #       if: always()
  #       continue-on-error: true
  #       run: |
  #         set -x +e
  #         pwd
  #         ls -all
  #         tree
        
  #     - name: Upload firmware
  #       uses: actions/upload-artifact@v4
  #       with:
  #         path: iot-playground.ino.bin
  #         name: iot-playground
  #         compression-level: 0
  #         if-no-files-found: error

  compile_one_button:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Update submodules
        run: |
          git submodule update --init --recursive

      - id: version
        name: Get Version
        run: |
          set -x

          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version=${{ github.ref_name }}
          else
            version="${GITHUB_SHA::7}"
          fi

          echo "version=${version}" > $GITHUB_OUTPUT

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Install platform
        run: |
          set -x
          
          arduino-cli core install m5stack:esp32 --additional-urls "file:///${PWD}/package_m5stack_index.json"

          arduino-cli core search m5stack
          arduino-cli board listall

          arduino-cli lib install M5StickCPlus2 --log-level warn --verbose
          
      - name: Install esptool
        run: |
          set -x
          pip install -U esptool

      - name: Compile OneButton Sketch
        working-directory: M5StickCPlus2/EXamples/OneButton-main/OneButton
        run: |
          arduino-cli compile --fqbn m5stack:esp32:m5stack_stickc_plus2 -e \
                              --build-property build.partitions=huge_app \
                              --build-property upload.maximum_size=3145728 \
                              --libraries M5StickCPlus2 \
                              ./OneButton.ino
      
      - name: List all files
        if: always()
        continue-on-error: true
        working-directory: M5StickCPlus2/EXamples/OneButton-main/OneButton
        run: |
          set -x
          pwd
          ls -all
          tree
      
      - name: Create OneButton firmware
        working-directory: M5StickCPlus2/EXamples/OneButton-main/OneButton
        run: |
          set -x

          esptool.py --chip esp32s3 merge_bin --output OneButton-${{ steps.version.outputs.version }}.M5StickCPlus2.bin \
            0x1000 build/m5stack.esp32.m5stack_stickc_plus2/OneButton.ino.bootloader.bin \
            0x8000 build/m5stack.esp32.m5stack_stickc_plus2/OneButton.ino.partitions.bin \
            0x10000 build/m5stack.esp32.m5stack_stickc_plus2/OneButton.ino.bin
        
      - name: Upload OneButton firmware
        uses: actions/upload-artifact@v4
        with:
          path: M5StickCPlus2/EXamples/OneButton-main/OneButton/OneButton-${{ steps.version.outputs.version }}.M5StickCPlus2.bin
          name: OneButton.M5StickCPlus2
          compression-level: 0
          if-no-files-found: error

  compile_user_demo_m5cardputer:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - id: version
        name: Get Version
        run: |
          set -x

          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version=${{ github.ref_name }}
          else
            version="${GITHUB_SHA::7}"
          fi

          echo "version=${version}" > $GITHUB_OUTPUT
      
      - name: Install esptool
        run: |
          set -x
          pip install -U esptool
      
      - name: Compile using esp-idf build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v4.4.6
          target: esp32s3
          path: M5Cardputer-UserDemo
      
      - name: List all files
        if: always()
        continue-on-error: true
        run: |
          set -x
          pwd
          ls -all
          tree
      
      - name: Create UserDemo.M5Cardputer firmware
        working-directory: M5Cardputer-UserDemo/build
        run: |
          set -x

          esptool.py --chip esp32s3 merge_bin --output ../../UserDemo-${{ steps.version.outputs.version }}.M5Cardputer.bin @flash_args

          # esptool.py --chip esp32s3 merge_bin --output ../../UserDemo.M5Cardputer.bin \
          #       0x0 bootloader/bootloader.bin \
          #       0x8000 partition_table/partition-table.bin \
          #       0x10000 cardputer.bin
      
      - name: List all files
        if: always()
        continue-on-error: true
        run: |
          set -x
          pwd
          ls -all
          tree
        
      - name: Upload M5Cardputer-UserDemo firmware
        uses: actions/upload-artifact@v4
        with:
          path: UserDemo-${{ steps.version.outputs.version }}.M5Cardputer.bin
          name: UserDemo.M5Cardputer
          compression-level: 0
          if-no-files-found: error

  create_release:
    runs-on: ubuntu-latest
    environment: github_release
    needs: 
      - compile_one_button
      - compile_user_demo_m5cardputer
    # if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - id: version
      name: Get Version
      run: |
        set -x

        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          version=${{ github.ref_name }}
        else
          version="${GITHUB_SHA::7}"
        fi

        echo "version=${version}" > $GITHUB_OUTPUT

    - uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: List all files
      if: always()
      continue-on-error: true
      run: |
        set -x
        pwd
        ls -all
        tree

    - name: Create Release ${{ steps.version.outputs.version }}
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        generate_release_notes: true
        files: |
          *.bin


